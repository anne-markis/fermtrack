// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	repository "github.com/anne-markis/fermtrack/internal/app/repository"
	mock "github.com/stretchr/testify/mock"
)

// FermentationRepository is an autogenerated mock type for the FermentationRepository type
type FermentationRepository struct {
	mock.Mock
}

type FermentationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *FermentationRepository) EXPECT() *FermentationRepository_Expecter {
	return &FermentationRepository_Expecter{mock: &_m.Mock}
}

// FindAll provides a mock function with given fields:
func (_m *FermentationRepository) FindAll() ([]repository.Fermentation, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []repository.Fermentation
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]repository.Fermentation, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []repository.Fermentation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Fermentation)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FermentationRepository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type FermentationRepository_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
func (_e *FermentationRepository_Expecter) FindAll() *FermentationRepository_FindAll_Call {
	return &FermentationRepository_FindAll_Call{Call: _e.mock.On("FindAll")}
}

func (_c *FermentationRepository_FindAll_Call) Run(run func()) *FermentationRepository_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FermentationRepository_FindAll_Call) Return(_a0 []repository.Fermentation, _a1 error) *FermentationRepository_FindAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FermentationRepository_FindAll_Call) RunAndReturn(run func() ([]repository.Fermentation, error)) *FermentationRepository_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUUID provides a mock function with given fields: uuid
func (_m *FermentationRepository) FindByUUID(uuid string) (*repository.Fermentation, error) {
	ret := _m.Called(uuid)

	if len(ret) == 0 {
		panic("no return value specified for FindByUUID")
	}

	var r0 *repository.Fermentation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*repository.Fermentation, error)); ok {
		return rf(uuid)
	}
	if rf, ok := ret.Get(0).(func(string) *repository.Fermentation); ok {
		r0 = rf(uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Fermentation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FermentationRepository_FindByUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUUID'
type FermentationRepository_FindByUUID_Call struct {
	*mock.Call
}

// FindByUUID is a helper method to define mock.On call
//   - uuid string
func (_e *FermentationRepository_Expecter) FindByUUID(uuid interface{}) *FermentationRepository_FindByUUID_Call {
	return &FermentationRepository_FindByUUID_Call{Call: _e.mock.On("FindByUUID", uuid)}
}

func (_c *FermentationRepository_FindByUUID_Call) Run(run func(uuid string)) *FermentationRepository_FindByUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *FermentationRepository_FindByUUID_Call) Return(_a0 *repository.Fermentation, _a1 error) *FermentationRepository_FindByUUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FermentationRepository_FindByUUID_Call) RunAndReturn(run func(string) (*repository.Fermentation, error)) *FermentationRepository_FindByUUID_Call {
	_c.Call.Return(run)
	return _c
}

// NewFermentationRepository creates a new instance of FermentationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFermentationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FermentationRepository {
	mock := &FermentationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
