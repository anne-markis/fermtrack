// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	repository "github.com/anne-markis/fermtrack/internal/repository"
	mock "github.com/stretchr/testify/mock"
)

// FermentationTrackService is an autogenerated mock type for the FermentationTrackService type
type FermentationTrackService struct {
	mock.Mock
}

type FermentationTrackService_Expecter struct {
	mock *mock.Mock
}

func (_m *FermentationTrackService) EXPECT() *FermentationTrackService_Expecter {
	return &FermentationTrackService_Expecter{mock: &_m.Mock}
}

// CreateFermentation provides a mock function with given fields: f
func (_m *FermentationTrackService) CreateFermentation(f *repository.Fermentation) error {
	ret := _m.Called(f)

	if len(ret) == 0 {
		panic("no return value specified for CreateFermentation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*repository.Fermentation) error); ok {
		r0 = rf(f)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FermentationTrackService_CreateFermentation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFermentation'
type FermentationTrackService_CreateFermentation_Call struct {
	*mock.Call
}

// CreateFermentation is a helper method to define mock.On call
//   - f *repository.Fermentation
func (_e *FermentationTrackService_Expecter) CreateFermentation(f interface{}) *FermentationTrackService_CreateFermentation_Call {
	return &FermentationTrackService_CreateFermentation_Call{Call: _e.mock.On("CreateFermentation", f)}
}

func (_c *FermentationTrackService_CreateFermentation_Call) Run(run func(f *repository.Fermentation)) *FermentationTrackService_CreateFermentation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*repository.Fermentation))
	})
	return _c
}

func (_c *FermentationTrackService_CreateFermentation_Call) Return(_a0 error) *FermentationTrackService_CreateFermentation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FermentationTrackService_CreateFermentation_Call) RunAndReturn(run func(*repository.Fermentation) error) *FermentationTrackService_CreateFermentation_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFermentation provides a mock function with given fields: uuid
func (_m *FermentationTrackService) DeleteFermentation(uuid string) error {
	ret := _m.Called(uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFermentation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FermentationTrackService_DeleteFermentation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFermentation'
type FermentationTrackService_DeleteFermentation_Call struct {
	*mock.Call
}

// DeleteFermentation is a helper method to define mock.On call
//   - uuid string
func (_e *FermentationTrackService_Expecter) DeleteFermentation(uuid interface{}) *FermentationTrackService_DeleteFermentation_Call {
	return &FermentationTrackService_DeleteFermentation_Call{Call: _e.mock.On("DeleteFermentation", uuid)}
}

func (_c *FermentationTrackService_DeleteFermentation_Call) Run(run func(uuid string)) *FermentationTrackService_DeleteFermentation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *FermentationTrackService_DeleteFermentation_Call) Return(_a0 error) *FermentationTrackService_DeleteFermentation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FermentationTrackService_DeleteFermentation_Call) RunAndReturn(run func(string) error) *FermentationTrackService_DeleteFermentation_Call {
	_c.Call.Return(run)
	return _c
}

// GetFermentationByID provides a mock function with given fields: uuid
func (_m *FermentationTrackService) GetFermentationByID(uuid string) (*repository.Fermentation, error) {
	ret := _m.Called(uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetFermentationByID")
	}

	var r0 *repository.Fermentation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*repository.Fermentation, error)); ok {
		return rf(uuid)
	}
	if rf, ok := ret.Get(0).(func(string) *repository.Fermentation); ok {
		r0 = rf(uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Fermentation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FermentationTrackService_GetFermentationByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFermentationByID'
type FermentationTrackService_GetFermentationByID_Call struct {
	*mock.Call
}

// GetFermentationByID is a helper method to define mock.On call
//   - uuid string
func (_e *FermentationTrackService_Expecter) GetFermentationByID(uuid interface{}) *FermentationTrackService_GetFermentationByID_Call {
	return &FermentationTrackService_GetFermentationByID_Call{Call: _e.mock.On("GetFermentationByID", uuid)}
}

func (_c *FermentationTrackService_GetFermentationByID_Call) Run(run func(uuid string)) *FermentationTrackService_GetFermentationByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *FermentationTrackService_GetFermentationByID_Call) Return(_a0 *repository.Fermentation, _a1 error) *FermentationTrackService_GetFermentationByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FermentationTrackService_GetFermentationByID_Call) RunAndReturn(run func(string) (*repository.Fermentation, error)) *FermentationTrackService_GetFermentationByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetFermentations provides a mock function with given fields:
func (_m *FermentationTrackService) GetFermentations() ([]repository.Fermentation, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFermentations")
	}

	var r0 []repository.Fermentation
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]repository.Fermentation, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []repository.Fermentation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Fermentation)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FermentationTrackService_GetFermentations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFermentations'
type FermentationTrackService_GetFermentations_Call struct {
	*mock.Call
}

// GetFermentations is a helper method to define mock.On call
func (_e *FermentationTrackService_Expecter) GetFermentations() *FermentationTrackService_GetFermentations_Call {
	return &FermentationTrackService_GetFermentations_Call{Call: _e.mock.On("GetFermentations")}
}

func (_c *FermentationTrackService_GetFermentations_Call) Run(run func()) *FermentationTrackService_GetFermentations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FermentationTrackService_GetFermentations_Call) Return(_a0 []repository.Fermentation, _a1 error) *FermentationTrackService_GetFermentations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FermentationTrackService_GetFermentations_Call) RunAndReturn(run func() ([]repository.Fermentation, error)) *FermentationTrackService_GetFermentations_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFermentation provides a mock function with given fields: f
func (_m *FermentationTrackService) UpdateFermentation(f *repository.Fermentation) error {
	ret := _m.Called(f)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFermentation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*repository.Fermentation) error); ok {
		r0 = rf(f)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FermentationTrackService_UpdateFermentation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFermentation'
type FermentationTrackService_UpdateFermentation_Call struct {
	*mock.Call
}

// UpdateFermentation is a helper method to define mock.On call
//   - f *repository.Fermentation
func (_e *FermentationTrackService_Expecter) UpdateFermentation(f interface{}) *FermentationTrackService_UpdateFermentation_Call {
	return &FermentationTrackService_UpdateFermentation_Call{Call: _e.mock.On("UpdateFermentation", f)}
}

func (_c *FermentationTrackService_UpdateFermentation_Call) Run(run func(f *repository.Fermentation)) *FermentationTrackService_UpdateFermentation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*repository.Fermentation))
	})
	return _c
}

func (_c *FermentationTrackService_UpdateFermentation_Call) Return(_a0 error) *FermentationTrackService_UpdateFermentation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FermentationTrackService_UpdateFermentation_Call) RunAndReturn(run func(*repository.Fermentation) error) *FermentationTrackService_UpdateFermentation_Call {
	_c.Call.Return(run)
	return _c
}

// NewFermentationTrackService creates a new instance of FermentationTrackService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFermentationTrackService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FermentationTrackService {
	mock := &FermentationTrackService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
